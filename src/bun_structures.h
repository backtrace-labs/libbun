#pragma once
/*
 * Copyright (c) 2021 Backtrace I/O, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stddef.h>

#include <bun/bun.h>

#ifdef __cplusplus
extern "C" {
#endif

/*
 * bun_handle is the underlying type of the bun_handle_t handle type. It stores
 * the configuration data used to generate reports.
 */
struct bun_handle
{
    size_t (*unwind_function)(void *);
    void (*free_context)(void *);
    void *unwinder_context;
    size_t unwind_buffer_size;
    void *unwind_buffer;
    enum bun_architecture arch;
};

/*
 * This is the cursor structure used to read/write binary streams generated by
 * libbun. The stream always begins with a header.
 */
struct bun_writer_reader_base
{
    char *buffer;
    char *cursor;
    size_t size;
};

struct bun_writer
{
    struct bun_writer_reader_base data;
};

struct bun_reader
{
    struct bun_writer_reader_base data;
};

#ifdef __cplusplus
}
#endif
